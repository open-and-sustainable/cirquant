# PRQL query for calculating product-level aggregates by geographic entity
# This query aggregates data by product and geography without artificial EU aggregation
# Works for any geo level: individual countries or EU27

# Start with the base circularity indicators data
from circularity_indicators_{{YEAR}}

# Group by product and geography to create aggregates
group {product_code, geo, year} (
    aggregate {
        # Production aggregates
        total_production_tonnes = sum production_volume_tonnes,
        total_production_value_eur = sum production_value_eur,

        # Import aggregates
        total_imports_tonnes = sum import_volume_tonnes,
        total_imports_value_eur = sum import_value_eur,

        # Export aggregates
        total_exports_tonnes = sum export_volume_tonnes,
        total_exports_value_eur = sum export_value_eur,

        # Apparent consumption aggregates
        total_apparent_consumption_tonnes = sum apparent_consumption_tonnes,
        total_apparent_consumption_value_eur = sum apparent_consumption_value_eur,

        # Circularity metrics (take max since all rows in group should have same values)
        current_circularity_rate = max current_circularity_rate_pct,
        potential_circularity_rate = max potential_circularity_rate_pct,
        total_material_savings_tonnes = sum estimated_material_savings_tonnes,
        total_monetary_savings_eur = sum estimated_monetary_savings_eur,

        # Count of data points (useful for data quality)
        data_points = count product_code
    }
)

# Calculate derived indicators
derive {
    # Trade balance
    trade_balance_tonnes = total_exports_tonnes - total_imports_tonnes,
    trade_balance_value_eur = total_exports_value_eur - total_imports_value_eur,

    # Self-sufficiency ratio
    self_sufficiency_ratio = s"""
        CASE
            WHEN total_apparent_consumption_tonnes > 0
            THEN total_production_tonnes / total_apparent_consumption_tonnes
            ELSE NULL
        END
    """,

    # Import dependency
    import_dependency_ratio = s"""
        CASE
            WHEN (total_production_tonnes + total_imports_tonnes) > 0
            THEN total_imports_tonnes / (total_production_tonnes + total_imports_tonnes)
            ELSE NULL
        END
    """,

    # Export intensity
    export_intensity_ratio = s"""
        CASE
            WHEN total_production_tonnes > 0
            THEN total_exports_tonnes / total_production_tonnes
            ELSE NULL
        END
    """,

    # Average unit values
    avg_production_unit_value = s"""
        CASE
            WHEN total_production_tonnes > 0
            THEN total_production_value_eur / total_production_tonnes
            ELSE NULL
        END
    """,

    avg_import_unit_value = s"""
        CASE
            WHEN total_imports_tonnes > 0
            THEN total_imports_value_eur / total_imports_tonnes
            ELSE NULL
        END
    """,

    avg_export_unit_value = s"""
        CASE
            WHEN total_exports_tonnes > 0
            THEN total_exports_value_eur / total_exports_tonnes
            ELSE NULL
        END
    """,

    # Trade intensity (total trade relative to domestic activity)
    trade_intensity = s"""
        CASE
            WHEN (total_production_tonnes + total_imports_tonnes) > 0
            THEN (total_imports_tonnes + total_exports_tonnes) /
                 (total_production_tonnes + total_imports_tonnes)
            ELSE NULL
        END
    """,

    # Strategic importance classification
    strategic_importance = s"""
        CASE
            WHEN self_sufficiency_ratio < 0.3 AND total_apparent_consumption_tonnes > 10000
                THEN 'critical_import_dependency'
            WHEN self_sufficiency_ratio < 0.5
                THEN 'high_import_dependency'
            WHEN self_sufficiency_ratio > 1.5
                THEN 'export_oriented'
            WHEN self_sufficiency_ratio >= 0.9 AND self_sufficiency_ratio <= 1.1
                THEN 'self_sufficient'
            WHEN self_sufficiency_ratio IS NULL
                THEN 'no_data'
            ELSE 'moderate_dependency'
        END
    """,

    # Data quality indicator
    has_production_data = s"total_production_tonnes > 0",
    has_trade_data = s"(total_imports_tonnes > 0 OR total_exports_tonnes > 0)"
}

# Select final fields for product aggregates table
select {
    product_code,
    geo,
    year,

    # Production
    total_production_tonnes,
    total_production_value_eur,

    # Trade
    total_imports_tonnes,
    total_imports_value_eur,
    total_exports_tonnes,
    total_exports_value_eur,

    # Apparent consumption
    total_apparent_consumption_tonnes,
    total_apparent_consumption_value_eur,

    # Trade indicators
    trade_balance_tonnes,
    trade_balance_value_eur,

    # Ratios and indicators
    self_sufficiency_ratio,
    import_dependency_ratio,
    export_intensity_ratio,
    trade_intensity,

    # Unit values
    avg_production_unit_value,
    avg_import_unit_value,
    avg_export_unit_value,

    # Circularity metrics
    current_circularity_rate,
    potential_circularity_rate,
    total_material_savings_tonnes,
    total_monetary_savings_eur,

    # Strategic classification
    strategic_importance,

    # Data quality
    data_points,
    has_production_data,
    has_trade_data
}

# Sort by product code and geo for consistent output
sort {product_code, geo}
